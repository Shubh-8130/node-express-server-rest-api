pipeline {
    agent any
    environment {
        DIRECTORY_NAME = 'node-express-server-rest-api'
        REPOSITORY_URL = 'https://github.com/Shubh-8130/node-express-server-rest-api.git'
        SSH_KEY_PATH = '/Users/shubhamsharma/jenkins/my-key-terr.pem'
        REMOTE_HOST = 'ubuntu@52.207.223.9'
        NPM_START_TIMEOUT = 180  // Set a reasonable timeout value in seconds
    }
    stages {
        stage('Build and Deploy') {
            steps {
                script {
                    // Connect to the server using SSH and execute commands
                    sh """
                        ssh -i ${env.SSH_KEY_PATH} ${env.REMOTE_HOST} '
                            # Define the directory name and repository URL
                            directory_name=${env.DIRECTORY_NAME}
                            repository_url=${env.REPOSITORY_URL}
                            cd ~

                            # Check if the directory exists
                            if [ -d "$directory_name" ]; then
                                # If the directory exists, delete it
                                echo "Deleting existing directory: $directory_name"
                                rm -rf "$directory_name"
                            fi

                            # Clone the repository
                            echo "Cloning repository into $directory_name"
                            git clone "$repository_url" "$directory_name"
                            cd "$directory_name"

                            # Additional commands or operations can be added here if needed

                            echo "Process completed successfully."
                            sudo apt update -y
                            sudo apt install nodejs npm -y
                            npm install -y
                            npm update -y
                            nohup npm start > npm_start.log 2>&1 &
                        '
                    """
                    
                    // Wait for npm start to complete within the specified timeout
                    def npmStartCompleted = waitForNpmStart()

                    if (npmStartCompleted) {
                        currentBuild.result = 'SUCCESS'
                    } else {
                        error 'Failed to start Node.js within the specified timeout.'
                    }
                }
            }
        }
    }
}

def waitForNpmStart() {
    def startTime = currentBuild.startTimeInMillis
    def timeoutMillis = env.NPM_START_TIMEOUT * 1000
    def endTime = startTime + timeoutMillis
    def intervalMillis = 5000  // Check every 5 seconds

    while (System.currentTimeMillis() < endTime) {
        def nid = sh(script: 'ssh -i ${env.SSH_KEY_PATH} ${env.REMOTE_HOST} "pgrep -f \\"node .*npm start\\""', returnStdout: true).trim()
        if (nid && nid != '0') {
            return true  // npm start has started successfully
        }

        sleep intervalMillis
    }

    return false  // Timeout reached without npm start completing
}
